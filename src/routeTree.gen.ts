/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as OauthCallbackRouteImport } from './routes/oauth-callback'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductShortIdRouteImport } from './routes/product.$shortId'
import { Route as CafeSlugRouteImport } from './routes/cafe.$slug'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const OauthCallbackRoute = OauthCallbackRouteImport.update({
  id: '/oauth-callback',
  path: '/oauth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductShortIdRoute = ProductShortIdRouteImport.update({
  id: '/product/$shortId',
  path: '/product/$shortId',
  getParentRoute: () => rootRouteImport,
} as any)
const CafeSlugRoute = CafeSlugRouteImport.update({
  id: '/cafe/$slug',
  path: '/cafe/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/oauth-callback': typeof OauthCallbackRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/cafe/$slug': typeof CafeSlugRoute
  '/product/$shortId': typeof ProductShortIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/oauth-callback': typeof OauthCallbackRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/cafe/$slug': typeof CafeSlugRoute
  '/product/$shortId': typeof ProductShortIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/oauth-callback': typeof OauthCallbackRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/cafe/$slug': typeof CafeSlugRoute
  '/product/$shortId': typeof ProductShortIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/oauth-callback'
    | '/profile'
    | '/search'
    | '/settings'
    | '/cafe/$slug'
    | '/product/$shortId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/oauth-callback'
    | '/profile'
    | '/search'
    | '/settings'
    | '/cafe/$slug'
    | '/product/$shortId'
  id:
    | '__root__'
    | '/'
    | '/oauth-callback'
    | '/profile'
    | '/search'
    | '/settings'
    | '/cafe/$slug'
    | '/product/$shortId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OauthCallbackRoute: typeof OauthCallbackRoute
  ProfileRoute: typeof ProfileRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  CafeSlugRoute: typeof CafeSlugRoute
  ProductShortIdRoute: typeof ProductShortIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth-callback': {
      id: '/oauth-callback'
      path: '/oauth-callback'
      fullPath: '/oauth-callback'
      preLoaderRoute: typeof OauthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$shortId': {
      id: '/product/$shortId'
      path: '/product/$shortId'
      fullPath: '/product/$shortId'
      preLoaderRoute: typeof ProductShortIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cafe/$slug': {
      id: '/cafe/$slug'
      path: '/cafe/$slug'
      fullPath: '/cafe/$slug'
      preLoaderRoute: typeof CafeSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OauthCallbackRoute: OauthCallbackRoute,
  ProfileRoute: ProfileRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  CafeSlugRoute: CafeSlugRoute,
  ProductShortIdRoute: ProductShortIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
