/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as OauthCallbackRouteImport } from './routes/oauth-callback'
import { Route as BlogRouteImport } from './routes/blog'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BlogIndexRouteImport } from './routes/blog.index'
import { Route as UserHandleRouteImport } from './routes/user.$handle'
import { Route as ProductShortIdRouteImport } from './routes/product.$shortId'
import { Route as CafeSlugRouteImport } from './routes/cafe.$slug'
import { Route as BlogPostIdRouteImport } from './routes/blog.$postId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const OauthCallbackRoute = OauthCallbackRouteImport.update({
  id: '/oauth-callback',
  path: '/oauth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogRoute,
} as any)
const UserHandleRoute = UserHandleRouteImport.update({
  id: '/user/$handle',
  path: '/user/$handle',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductShortIdRoute = ProductShortIdRouteImport.update({
  id: '/product/$shortId',
  path: '/product/$shortId',
  getParentRoute: () => rootRouteImport,
} as any)
const CafeSlugRoute = CafeSlugRouteImport.update({
  id: '/cafe/$slug',
  path: '/cafe/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogPostIdRoute = BlogPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => BlogRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteWithChildren
  '/oauth-callback': typeof OauthCallbackRoute
  '/privacy': typeof PrivacyRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/cafe/$slug': typeof CafeSlugRoute
  '/product/$shortId': typeof ProductShortIdRoute
  '/user/$handle': typeof UserHandleRoute
  '/blog/': typeof BlogIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/oauth-callback': typeof OauthCallbackRoute
  '/privacy': typeof PrivacyRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/cafe/$slug': typeof CafeSlugRoute
  '/product/$shortId': typeof ProductShortIdRoute
  '/user/$handle': typeof UserHandleRoute
  '/blog': typeof BlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteWithChildren
  '/oauth-callback': typeof OauthCallbackRoute
  '/privacy': typeof PrivacyRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/cafe/$slug': typeof CafeSlugRoute
  '/product/$shortId': typeof ProductShortIdRoute
  '/user/$handle': typeof UserHandleRoute
  '/blog/': typeof BlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/oauth-callback'
    | '/privacy'
    | '/profile'
    | '/search'
    | '/settings'
    | '/blog/$postId'
    | '/cafe/$slug'
    | '/product/$shortId'
    | '/user/$handle'
    | '/blog/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/oauth-callback'
    | '/privacy'
    | '/profile'
    | '/search'
    | '/settings'
    | '/blog/$postId'
    | '/cafe/$slug'
    | '/product/$shortId'
    | '/user/$handle'
    | '/blog'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/oauth-callback'
    | '/privacy'
    | '/profile'
    | '/search'
    | '/settings'
    | '/blog/$postId'
    | '/cafe/$slug'
    | '/product/$shortId'
    | '/user/$handle'
    | '/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRoute: typeof BlogRouteWithChildren
  OauthCallbackRoute: typeof OauthCallbackRoute
  PrivacyRoute: typeof PrivacyRoute
  ProfileRoute: typeof ProfileRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  CafeSlugRoute: typeof CafeSlugRoute
  ProductShortIdRoute: typeof ProductShortIdRoute
  UserHandleRoute: typeof UserHandleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth-callback': {
      id: '/oauth-callback'
      path: '/oauth-callback'
      fullPath: '/oauth-callback'
      preLoaderRoute: typeof OauthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof BlogRoute
    }
    '/user/$handle': {
      id: '/user/$handle'
      path: '/user/$handle'
      fullPath: '/user/$handle'
      preLoaderRoute: typeof UserHandleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$shortId': {
      id: '/product/$shortId'
      path: '/product/$shortId'
      fullPath: '/product/$shortId'
      preLoaderRoute: typeof ProductShortIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cafe/$slug': {
      id: '/cafe/$slug'
      path: '/cafe/$slug'
      fullPath: '/cafe/$slug'
      preLoaderRoute: typeof CafeSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/$postId': {
      id: '/blog/$postId'
      path: '/$postId'
      fullPath: '/blog/$postId'
      preLoaderRoute: typeof BlogPostIdRouteImport
      parentRoute: typeof BlogRoute
    }
  }
}

interface BlogRouteChildren {
  BlogPostIdRoute: typeof BlogPostIdRoute
  BlogIndexRoute: typeof BlogIndexRoute
}

const BlogRouteChildren: BlogRouteChildren = {
  BlogPostIdRoute: BlogPostIdRoute,
  BlogIndexRoute: BlogIndexRoute,
}

const BlogRouteWithChildren = BlogRoute._addFileChildren(BlogRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRoute: BlogRouteWithChildren,
  OauthCallbackRoute: OauthCallbackRoute,
  PrivacyRoute: PrivacyRoute,
  ProfileRoute: ProfileRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  CafeSlugRoute: CafeSlugRoute,
  ProductShortIdRoute: ProductShortIdRoute,
  UserHandleRoute: UserHandleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
